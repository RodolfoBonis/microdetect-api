name: ci

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'version.txt'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  checks: read
  discussions: write
  repository-projects: write
  issues: write
  pull-requests: write

jobs:
  lint_go:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Instalar depend√™ncias de lint
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/tools/cmd/goimports@latest
          export PATH=$PATH:$(go env GOPATH)/bin

      - name: Rodar lint.sh e salvar sa√≠da
        id: lint
        run: |
          chmod +x .config/scripts/lint.sh
          export PATH=$PATH:$(go env GOPATH)/bin
          set +e
          ./.config/scripts/lint.sh > lint_output.txt 2>&1
          echo "status=$?" >> $GITHUB_OUTPUT
          set -e

      - name: Instalar depend√™ncias Python para coment√°rio
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        run: pip install openai PyGithub

      - name: Comentar problemas de lint no PR
        if: ${{ github.event_name == 'pull_request' && steps.lint.outputs.status != '0' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python .config/scripts/generate_lint_report.py

      - name: Falhar o job se houver problemas de lint
        if: ${{ steps.lint.outputs.status != '0' }}
        run: exit 1

  check_vulnerabilities:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Set up Git
        run: |
          git config --global url."https://${{ github.token }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Define Private Dependencies
        run: |
          export GOPRIVATE=github.com/RodolfoBonis/go_key_guardian

      - name: Install Python dependencies
        run: pip install -r .config/scripts/requirements.txt

      - name: Verify Dependencies Vulnerabilities
        id: govulncheck
        uses: golang/govulncheck-action@v1
        continue-on-error: true
        with:
          output-format: text
          output-file: vulnerabilities.txt

      - name: Run vulnerability report script
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python .config/scripts/generate_vulnerability_report.py

      - name: Create trigger file to force PR (if needed)
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: |
          echo "trigger" > .vuln_trigger

      - name: Create branch and PR if vulnerabilities are found
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          BRANCH_NAME="fix-vulnerabilities-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add .vuln_trigger
          git commit -m "chore: trigger PR to update dependencies due to vulnerabilities"
          git push origin $BRANCH_NAME
          # Detect target branch (main ou branch atual)
          TARGET_BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
          gh pr create --title "Fix vulnerabilities" --body "Este PR foi aberto automaticamente para que as depend√™ncias possam ser atualizadas devido a vulnerabilidades detectadas pelo govulncheck.\n\n**Aten√ß√£o:** As vulnerabilidades n√£o s√£o expostas neste PR. Analise e atualize as depend√™ncias conforme necess√°rio." --base "$TARGET_BRANCH" --head "$BRANCH_NAME"
          pr_url=$(gh pr view --json url --jq '.url')
          echo "PR_URL=$pr_url" >> $GITHUB_ENV

      - name: Remove trigger file
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: rm -f .vuln_trigger

      - name: Fail CI if vulnerabilities are found
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: exit 1

  notify:
    needs: [lint_go, check_vulnerabilities]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Success Message via Telegram
        if: ${{ needs.lint_go.result == 'success' && needs.check_vulnerabilities.result == 'success' }}
        uses: akeylimepie/telegram-action@main
        with:
          token: ${{ secrets.BOTTOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          parse_mode: 'markdown'
          message_thread_id: ${{ secrets.THREAD_ID }}
          text: |
            üöÄ *CI Successful!*

            *Details:*
            ‚Ä¢ Repository: ${{ github.repository }}
            ‚Ä¢ Triggered by: ${{ github.actor }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Branch: ${{ github.event_name == 'pull_request' && github.head_ref && github.base_ref && format('{0} ‚Üí {1}', github.head_ref, github.base_ref) || github.ref_name }}
            ‚Ä¢ PR URL: ${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || env.PR_URL }}

            ‚úÖ CI Status: Success

      - name: Send Error Message via Telegram
        if: ${{ needs.lint_go.result != 'success' || needs.check_vulnerabilities.result != 'success' }}
        uses: akeylimepie/telegram-action@main
        with:
          token: ${{ secrets.BOTTOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          parse_mode: 'markdown'
          message_thread_id: ${{ secrets.THREAD_ID }}
          text: |
            ‚ùå *CI Failed!*

            *Error Details:*
            ‚Ä¢ Repository: ${{ github.repository }}
            ‚Ä¢ Triggered by: ${{ github.actor }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Branch: ${{ github.event_name == 'pull_request' && github.head_ref && github.base_ref && format('{0} ‚Üí {1}', github.head_ref, github.base_ref) || github.ref_name }}
            ‚Ä¢ PR URL: ${{ github.event_name == 'pull_request' && format('https://github.com/{0}/pull/{1}', github.repository, github.event.pull_request.number) || env.PR_URL }}

            üîç *Debug Information:*
            ‚Ä¢ CI Status: Failure
            ‚Ä¢ Commit URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

            ‚ö†Ô∏è [Check GitHub Actions Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})